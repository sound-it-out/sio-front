@implements IAsyncDisposable
@using Microsoft.Extensions.DependencyInjection;
@inject Notifications.Processor.INotificationProcessor _notificationProcessor;
<LoadingScreen OnPageLoadAsync="StartNotificationsAsync">
    <CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <Loader />
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
</LoadingScreen>

@code {
    protected Task StartNotificationsAsync() => _notificationProcessor.StartAsync();
    public async ValueTask DisposeAsync() => await _notificationProcessor.StopAsync();
}
